/*
 * jpnCellMatchDone.java
 *
 * Created on 14 août 2008, 15:46
 */
package bbos.General.Views.Match;

import bbos.General.Model.mMatch;
import bbos.General.Model.mTeam;
import bbos.MainForm;
import bbos.General.Views.Team.jdgTeam;
import bbos.General.Views.Team.jtmTeamPlayers;
import bbos.mBBoS;
import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author  root
 */
public class jpnCellMatchNext extends javax.swing.JPanel {

    mMatch _match;
    mTeam _team;
    JTable _table;

    /** Creates new form jpnCellMatchDone */
    public jpnCellMatchNext(int number, mMatch match, mTeam team, JTable table) {
        initComponents();

        _match = match;
        if (number % 2 == 0) {
            this.setBackground(Color.WHITE);
        }

        if (match.getChallengerId() == match.getOpponentId()) {
            jlbMatchDescription.setText("You have been challenged by " + match.getOppponent().getName() + ".");
        } else {
            jlbMatchDescription.setText("You have challenged " + match.getOppponent().getName() + ".");
            jbtAccept.setEnabled(false);
        }
        _team = team;
        _table = table;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlbMatchDescription = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jbtTeamName = new javax.swing.JButton();
        jbtReject = new javax.swing.JButton();
        jbtAccept = new javax.swing.JButton();

        setBorder(new javax.swing.border.LineBorder(javax.swing.UIManager.getDefaults().getColor("CheckBoxMenuItem.selectionBackground"), 1, true));
        setPreferredSize(new java.awt.Dimension(310, 60));
        setLayout(new java.awt.GridLayout(2, 0, 1, 0));

        jlbMatchDescription.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbMatchDescription.setText("You have been challenged by team :");
        add(jlbMatchDescription);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0, 2, 2));

        jbtTeamName.setText("See opponent");
        jbtTeamName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtTeamNameActionPerformed(evt);
            }
        });
        jPanel1.add(jbtTeamName);

        jbtReject.setText("Reject");
        jbtReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtRejectActionPerformed(evt);
            }
        });
        jPanel1.add(jbtReject);

        jbtAccept.setText("Accept");
        jbtAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAcceptActionPerformed(evt);
            }
        });
        jPanel1.add(jbtAccept);

        add(jPanel1);
    }// </editor-fold>//GEN-END:initComponents
    private void jbtTeamNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbtTeamNameActionPerformed
    {//GEN-HEADEREND:event_jbtTeamNameActionPerformed
        jdgTeam window = new jdgTeam(_match.getOppponent(), jtmTeamPlayers.FULL_VIEW);
        window.setVisible(true);
    }//GEN-LAST:event_jbtTeamNameActionPerformed

    private void jbtRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtRejectActionPerformed
        int response = JOptionPane.showConfirmDialog(this, "Are your sure to cancel this match ?", "Cancel match", JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            mBBoS.getSingleton().cancelMatch(_match.getId());
            _team.getMatches().remove(_match);

            MainForm.getSingleton().redraw();
        }
    }//GEN-LAST:event_jbtRejectActionPerformed

    private void jbtAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAcceptActionPerformed
        int response = JOptionPane.showConfirmDialog(this, "Are your sure to accept this match ?", "Accept match", JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            mBBoS.getSingleton().acceptMatch(_match.getId());
            MainForm.getSingleton().redraw();
        }
    }//GEN-LAST:event_jbtAcceptActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbtAccept;
    private javax.swing.JButton jbtReject;
    private javax.swing.JButton jbtTeamName;
    private javax.swing.JLabel jlbMatchDescription;
    // End of variables declaration//GEN-END:variables
    public void paint(Graphics g) {
        super.paint(g);

        if (_match.getChallengerId() == _match.getOpponentId()) {
            jbtAccept.setEnabled(true);
        } else {
            jbtAccept.setEnabled(true);
            for (int i = 0; i < _team.getMatches().size(); i++) {
            mMatch match = (mMatch) _team.getMatches().get(i);
            if (match.getState() == mMatch.STATE_IN_COURSE) {
                jbtAccept.setEnabled(false);
            }
        }
        }

        
    }
}
